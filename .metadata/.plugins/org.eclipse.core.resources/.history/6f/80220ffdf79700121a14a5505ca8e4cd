//=======================================================================
//  ClassName : LiplisWidgetTwitterConfiguration
//  概要      : ツイッターの設定画面
//
//	extends   : Activity
//	impliments:
//
//	レイアウトファイル : twitterconfiguration.xml
//
//  プリファレンスには変換値ではなく、設定値をのものを入力する!
//
//2013/03/27 ver3.3.6 Twitter対応
//
//  LiplisAndroidシステム
//  Copyright(c) 2011-2013 sachin. All Rights Reserved.
//=======================================================================
package little.cute.Activity;

import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;
import little.cute.R;
import little.cute.Common.LiplisDefine;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.Spinner;
import android.widget.TextView;

@SuppressLint("WorldWriteableFiles")
public class LiplisWidgetTwitterConfiguration extends Activity {

	private static final int REQUEST_TWITTER_PASS_ACTIVITY = 1;

	 //トークンとシークレットトークん
	 private String token;
	 private String secret;

    ///====================================================================
    ///
    ///                             初期化処理
    ///
    ///====================================================================

    /// <summary>
    /// onCreate
    /// 作成時処理
    /// </summary>
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	//親クラスの
        super.onCreate(savedInstanceState);

        //レイアウトのセット
        setContentView(R.layout.twitterconfiguration);

        //クローズボタンの設定
        setCloseButton();

        //セーブボタンの設定
        setSaveButton();

        //ツイッター登録ボタン
        setTwitterPassCodeButton();

        //インターバルスピナーのハンドラセット
        setIntervalSpinner();

        //値の取得
        getPriference();

        //ツイッターオブジェクトの初期化
        initTwitterObject();
    }


    ///====================================================================
    ///
    ///                               初期化
    ///
    ///====================================================================

    /// <summary>
    /// initTwitterObject
    /// ツイッターオブジェクトの初期化
    /// </summary>
    private void initTwitterObject()
    {
   	 	// このファクトリインスタンスは再利用可能でスレッドセーフです
	    twitter = TwitterFactory.getSingleton();

	    //アプリケーションキーを設定する
	    twitter.setOAuthConsumer(LiplisDefine.TWITTER_OAUTH_CONSUMERKEY, LiplisDefine.TWITTER_OAUTH_CONSUMERSECRET);

	    //リクエストトークンを作成する
	    try {
			requestToken = twitter.getOAuthRequestToken();
		} catch (TwitterException e) {
			// TODO 自動生成された catch ブロック
			e.printStackTrace();
		}

	    //アクセストークンを作成する
	    accessToken = new AccessToken(token,secret);
    }

    /// <summary>
    /// onDestroy
    /// 終了時処理
    /// </summary>
    @Override
    public void onDestroy()
	{

	}

    ///====================================================================
    ///
    ///                           イベントハンドラ
    ///
    ///====================================================================


    /// <summary>
    /// setSaveButton
    /// セーブボタンのハンドらセット
    /// </summary>
    private void setSaveButton()
    {
        //ボタンの配置
        Button closeButton = (Button) findViewById(R.id.btnTwitterConfigSave);

        //クリックリスナーの作成
        closeButton.setOnClickListener(new OnClickListener() {
		  	//クリックイベント
			public void onClick(View v) {
				setPriference();
				finish();
		    }
		});
    }

    /// <summary>
    /// setCloseButton
    /// クローズボタンのハンドらセット
    /// </summary>
    private void setCloseButton()
    {
        //ボタンの配置
        Button closeButton = (Button) findViewById(R.id.btnTwitterConfigClose);

        //クリックリスナーの作成
        closeButton.setOnClickListener(new OnClickListener() {
		  	//クリックイベント
			public void onClick(View v) {
				finish();
		    }
		});
    }


    /// <summary>
    /// setTwitterPassCodeButton
    /// ツイッター登録ボタンのハンドらセット
    /// </summary>
    private void setTwitterPassCodeButton()
    {
        //ボタンの配置
        Button button = (Button) findViewById(R.id.btnSetTwitterPassCode);

        //クリックリスナーの作成
        button.setOnClickListener(new OnClickListener() {
		  	//クリックイベント
			public void onClick(View v) {
				Intent intent=new Intent(getApplicationContext(),LiplisWidgetTwitterRegist.class);
	            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
	            startActivity(intent);
		    }
		});
    }

    /// <summary>
    /// setIntervalSpinner
    /// インターバルスピナーのハンドラセット
    /// </summary>
    private void setIntervalSpinner()
    {
        //すぴなーの設定
        Spinner spinner = (Spinner) findViewById(R.id.spTwitterInterval);

        // スピナーのアイテムが選択された時に呼び出されるコールバックリスナーを登録します
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            // アイテムが選択された時の動作
            public void onItemSelected(AdapterView parent,View view, int position,long id) {
              // Spinner を取得
              Spinner spinner = (Spinner) parent;

              // 選択されたアイテムのテキストを取得
              @SuppressWarnings("unused")
              String str = spinner.getSelectedItem().toString();
            }

            // 何も選択されなかった時の動作
            public void onNothingSelected(AdapterView parent) {
            }
        });
    }

    ///====================================================================
    ///
    ///                         プリファレンス
    ///
    ///====================================================================

    private void setPriference()
    {
        //プリファレンスの取得
        final SharedPreferences config = getSharedPreferences(LiplisDefine.PREFS_NAME, MODE_WORLD_WRITEABLE);

        //プリファレンスの呼び出し
        SharedPreferences.Editor configEditor = config.edit();

        //今回設定した値をプリファレンスにプット
        configEditor.putInt(LiplisDefine.PREFS_TWITTER_MODE			, getTwitterMode());
        configEditor.putInt(LiplisDefine.PREFS_TWITTER_INTERVAL		, getTwitterInterval());


        //変更をコミット
        configEditor.commit();
    }

    private void getPriference()
    {
        //プリファレンスの取得
        final SharedPreferences config = getSharedPreferences(LiplisDefine.PREFS_NAME, MODE_WORLD_WRITEABLE);

        //トークンとシークレット取得
	   	token = config.getString(LiplisDefine.PREFS_TWITTER_TOKEN , "");
	   	secret = config.getString(LiplisDefine.PREFS_TWITTER_SECRET , "");

        setTwitterMode(config.getInt(LiplisDefine.PREFS_TWITTER_MODE, 0));
        setTwitterInterval(config.getInt(LiplisDefine.PREFS_TWITTER_INTERVAL, 4));
        setTwitterStatusText(token,secret);


    }

    /// <summary>
    /// getTwitterMode
    /// ツイッターモードの取得
    /// </summary>
    private int getTwitterMode()
    {
    	int result = 1;
    	try
    	{
            final RadioButton rbTwitterMode1 = (RadioButton)findViewById(R.id.rbTwitterMode1);
            final RadioButton rbTwitterMode2 = (RadioButton)findViewById(R.id.rbTwitterMode2);

            if(rbTwitterMode1.isChecked()){result = 0;}
            else if(rbTwitterMode2.isChecked()){result = 1;}

            return result;
    	}
    	catch(Exception e)
    	{
    		return 1;
    	}
    }

    /// <summary>
    /// setTwitterMode
    /// ツイッターモードのセット
    /// </summary>
    private void setTwitterMode(int mode)
    {
        final RadioButton rbTwitterMode1 = (RadioButton)findViewById(R.id.rbTwitterMode1);
        final RadioButton rbTwitterMode2 = (RadioButton)findViewById(R.id.rbTwitterMode2);
    	try
    	{
            if(mode == 0)		{rbTwitterMode1.setChecked(true);}
            else				{rbTwitterMode2.setChecked(true);}


            return;
    	}
    	catch(Exception e)
    	{
    		rbTwitterMode1.setChecked(true);
    		return;
    	}
    }

    /// <summary>
    /// getTwitterInterval
    /// ツイッターインターバルを取得する
    /// </summary>
    private int getTwitterInterval()
    {
    	try
    	{
    		final Spinner spinner = (Spinner) findViewById(R.id.spTwitterInterval);

    		if(spinner.getSelectedItem().toString().equals("1時間")){return 0;}
    		else if(spinner.getSelectedItem().toString().equals("3時間")){return 1;}
    		else if(spinner.getSelectedItem().toString().equals("6時間")){return 2;}
			else if(spinner.getSelectedItem().toString().equals("12時間")){return 3;}
			else if(spinner.getSelectedItem().toString().equals("1日")){return 4;}
			else if(spinner.getSelectedItem().toString().equals("3日")){return 5;}
			else if(spinner.getSelectedItem().toString().equals("7日")){return 6;}
			else if(spinner.getSelectedItem().toString().equals("無制限")){return 7;}
    		else{return 0;}
    	}
    	catch(Exception e)
    	{
    		return 0;
    	}
    }

    /// <summary>
    /// setTwitterInterval
    /// ツイッターインターバルをセットする
    /// </summary>
    private void setTwitterInterval(int idx)
    {
    	final Spinner spinner = (Spinner) findViewById(R.id.spTwitterInterval);
    	try
    	{
    		spinner.setSelection(idx);
    	}
    	catch(Exception e)
    	{
    		spinner.setSelection(0);
    	}
    }


    /// <summary>
    /// setTwitterStatusText
    /// ツイッター状態のテキストをセットする
    /// </summary>
    private void setTwitterStatusText(String token, String secret)
    {
    	//ボタンの配置
        TextView txt = (TextView) findViewById(R.id.txtTwitterStatus);

    	if(token.equals("") || secret.equals(""))
    	{
    		txt.setText("未認証");
    		txt.setTextColor(Color.rgb(200, 200, 200));
    	}
    	else
    	{
            txt.setText("認証OK");
            txt.setTextColor(Color.rgb(0, 0, 255));
    	}
    }
}
