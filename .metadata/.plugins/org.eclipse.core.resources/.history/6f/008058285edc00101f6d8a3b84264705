//=======================================================================
//  ClassName : LiplisWidgetConfiguration
//  概要      	  : ウィジェットの設定画面
//
//	extends   : Activity
//	impliments: 	
//
//	レイアウトファイル : configuration.xml
//
//  プリファレンスには変換値ではなく、設定値をのものを入力する!
//
//  LiplisAndroidシステム      
//  Copyright(c) 2011-2011 sachin. All Rights Reserved. 
//=======================================================================
package little.cute.Activity;

import java.util.UUID;

import little.cute.R;
import little.cute.Common.LiplisDefine;
import little.cute.Common.LiplisUtil;
import little.cute.Widget.LiplisWidgetProvider;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.appwidget.AppWidgetManager;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.SystemClock;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

public class LiplisWidgetConfiguration extends Activity {

    ///====================================================================
    ///
    ///                             初期化処理
    ///                         
    ///====================================================================
	
	///=====================================
    /// UID
	private String Uid = "";
	
    /// <summary>
    /// onCreate
    /// 作成時処理
    /// </summary>
    @Override
    public void onCreate(Bundle savedInstanceState) {
    	//親クラスの
        super.onCreate(savedInstanceState);
   
        //設定開始の通知
        sendBroadcastStart();
        
        //レイアウトのセット
        setContentView(R.layout.configuration);
        
        //クローズボタンの設定
        setCloseButton();
        
        //セーブボタンの設定
        setSaveButton();
        
        //ウインドウスピナーのハンドラセット
        setWindowSpinner();

        //値の取得
        getPriference();        
    }
    

    /// <summary>
    /// setSaveButton
    /// セーブボタンのハンドらセット
    /// </summary>
    private void setSaveButton()
    {
        //ボタンの配置
        Button closeButton = (Button) findViewById(R.id.btnConfigSave);
        
        //クリックリスナーの作成
        closeButton.setOnClickListener(new OnClickListener() {
		  	//クリックイベント
			public void onClick(View v) {
				setPriference();
				finish();
				sendBroadcastSettingEnd();
		    }
		});
    }
    
    
    /// <summary>
    /// setCloseButton
    /// クローズボタンのハンドらセット
    /// </summary>
    private void setCloseButton()
    {
        //ボタンの配置
        Button closeButton = (Button) findViewById(R.id.btnConfigClose);
        
        //クリックリスナーの作成
        closeButton.setOnClickListener(new OnClickListener() {
		  	//クリックイベント
			public void onClick(View v) {
				finish();
				sendBroadcastSettingEnd();
		    }
		});
    }
    
    /// <summary>
    /// setWindowSpinner
    /// ウインドウスピナーのハンドラセット
    /// </summary>
    private void setWindowSpinner()
    {
        //すぴなーの設定
        Spinner spinner = (Spinner) findViewById(R.id.spWindow);
     
        // スピナーのアイテムが選択された時に呼び出されるコールバックリスナーを登録します
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            // アイテムが選択された時の動作  
            public void onItemSelected(AdapterView parent,View view, int position,long id) {  
              // Spinner を取得  
              Spinner spinner = (Spinner) parent;  
        
              // 選択されたアイテムのテキストを取得  
              String str = spinner.getSelectedItem().toString();  
            }  
        
            // 何も選択されなかった時の動作  
            public void onNothingSelected(AdapterView parent) {  
            }  
        });
    }
    
    ///====================================================================
    ///
    ///                         プリファレンス
    ///                         
    ///====================================================================
    
    private void setPriference()
    {
        //プリファレンスの取得
        final SharedPreferences config = getSharedPreferences(LiplisDefine.PREFS_NAME, MODE_WORLD_WRITEABLE);
    	
        //プリファレンスの呼び出し
        SharedPreferences.Editor configEditor = config.edit();

        //今回設定した値をプリファレンスにプット
        configEditor.putString(LiplisDefine.PREFS_UID, config.getString(LiplisDefine.PREFS_UID, UUID.randomUUID().toString()));
        configEditor.putInt(LiplisDefine.PREFS_SET_FLG, 1);
        configEditor.putInt(LiplisDefine.PREFS_MODE			, getScDataMode());
        configEditor.putInt(LiplisDefine.PREFS_SPEED		, getScDataSpeed());
        configEditor.putInt(LiplisDefine.PREFS_WINDOW_CLICK	, getScDataLc());
        configEditor.putInt(LiplisDefine.PREFS_AUTO_SLEEP	, getScDataAutoSleep());
        configEditor.putInt(LiplisDefine.PREFS_AUTO_WAIKUP	, getScDataAutoWaikup());
        configEditor.putInt(LiplisDefine.PREFS_DISPLAY_ICON	, getScDataDisplayIcon());
        configEditor.putInt(LiplisDefine.PREFS_WINDOW_CODE	, getScDataWindowColor());
        
        //変更をコミット
        configEditor.commit();
    }
    
    private void getPriference()
    {
        //プリファレンスの取得
        final SharedPreferences config = getSharedPreferences(LiplisDefine.PREFS_NAME, MODE_WORLD_WRITEABLE);
    	
        setPrfMode(config.getInt(LiplisDefine.PREFS_MODE, 0));
        setPrfSpeed(config.getInt(LiplisDefine.PREFS_SPEED, 0));
        setPrfLc(config.getInt(LiplisDefine.PREFS_WINDOW_CLICK, 0));
        setPrfAutoSleep(config.getInt(LiplisDefine.PREFS_AUTO_SLEEP, 1));
        setPrfAutoWaikup(config.getInt(LiplisDefine.PREFS_AUTO_WAIKUP, 0));
        setPrfDisplayIcon(config.getInt(LiplisDefine.PREFS_DISPLAY_ICON, 0));
        setPrfWindowColor(config.getInt(LiplisDefine.PREFS_WINDOW_CODE, 0));
    }
    
    ///====================================================================
    ///
    ///                 設定反映のためのブロードキャスト
    ///                         
    ///====================================================================
    
    /// <summary>
    /// sendBroadcast
    /// ウィジェットにブロードキャスト送信
    /// </summary>
    private void sendBroadcastSettingEnd()
    {
    	Intent intentWidget = new Intent(getApplicationContext(), LiplisWidgetProvider.class);
    	intentWidget.setAction(LiplisDefine.LIPLIS_SETTING_FINISH);
    	sendBroadcast(intentWidget);
    }
    
    /// <summary>
    /// sendBroadcast
    /// ウィジェットにブロードキャスト送信
    /// </summary>
    private void sendBroadcastStart()
    {
    	Intent intentWidget = new Intent(getApplicationContext(), LiplisWidgetProvider.class);
    	intentWidget.setAction(LiplisDefine.LIPLIS_SETTING_START);
    	sendBroadcast(intentWidget);
    }
    
    ///====================================================================
    ///
    ///                           設定値取得
    ///                         
    ///====================================================================
    
    /// <summary>
    /// getRate
    /// おしゃべり頻度の取得
    /// </summary>
    private int getScDataMode()
    {
    	int result = 1;
    	try
    	{
    		//画面データの取得
            final RadioButton rbRate1 = (RadioButton)findViewById(R.id.rbRate1);
            final RadioButton rbRate2 = (RadioButton)findViewById(R.id.rbRate2);
            final RadioButton rbRate3 = (RadioButton)findViewById(R.id.rbRate3);
            final RadioButton rbRate4 = (RadioButton)findViewById(R.id.rbRate4);
            final RadioButton rbRate5 = (RadioButton)findViewById(R.id.rbRate5);
            
            //チェックの判定
            if(rbRate1.isChecked())			{result = 0;}
            else if(rbRate2.isChecked())	{result = 1;}
            else if(rbRate3.isChecked())	{result = 2;}
            else if(rbRate4.isChecked())	{result = 3;}
            else if(rbRate5.isChecked())	{result = 4;}

            return result;
    	}
    	catch(Exception e)
    	{
    		return 0;
    	}
    }
    
    /// <summary>
    /// setPrfMode
    /// おしゃべり頻度の取得
    /// </summary>
    private void setPrfMode(int mode)
    {
        final RadioButton rbRate1 = (RadioButton)findViewById(R.id.rbRate1);
        final RadioButton rbRate2 = (RadioButton)findViewById(R.id.rbRate2);
        final RadioButton rbRate3 = (RadioButton)findViewById(R.id.rbRate3);
        final RadioButton rbRate4 = (RadioButton)findViewById(R.id.rbRate4);
        final RadioButton rbRate5 = (RadioButton)findViewById(R.id.rbRate5);
        
    	try
    	{
    		if(mode == 0){rbRate1.setChecked(true);	}
    		else if(mode == 1){	rbRate2.setChecked(true);}
    		else if(mode == 2){	rbRate3.setChecked(true);}
    		else if(mode == 3){	rbRate4.setChecked(true);}
    		else if(mode == 4){	rbRate5.setChecked(true);}

    			            
            return;
    	}
    	catch(Exception e)
    	{
    		rbRate1.setChecked(true);
    		return;
    	}
    }
    
    /// <summary>
    /// getActive
    /// おしゃべり速度の取得
    /// </summary>
    private int getScDataSpeed()
    {
    	int result = 1;
    	try
    	{
            final RadioButton rbSpeed1 = (RadioButton)findViewById(R.id.rbSpeed1);
            final RadioButton rbSpeed2 = (RadioButton)findViewById(R.id.rbSpeed2);
            final RadioButton rbSpeed3 = (RadioButton)findViewById(R.id.rbSpeed3);
            final RadioButton rbSpeed4 = (RadioButton)findViewById(R.id.rbSpeed4);
            
            if(rbSpeed1.isChecked()){result = 0;}
            else if(rbSpeed2.isChecked()){result = 1;}
            else if(rbSpeed3.isChecked()){result = 2;}
            else if(rbSpeed4.isChecked()){result = 3;}

            return result;
    	}
    	catch(Exception e)
    	{
    		return 1;
    	}
    }
    
    /// <summary>
    /// getActive
    /// おしゃべり速度の取得
    /// </summary>
    private void setPrfSpeed(int speed)
    {
        final RadioButton rbSpeed1 = (RadioButton)findViewById(R.id.rbSpeed1);
        final RadioButton rbSpeed2 = (RadioButton)findViewById(R.id.rbSpeed2);
        final RadioButton rbSpeed3 = (RadioButton)findViewById(R.id.rbSpeed3);
        final RadioButton rbSpeed4 = (RadioButton)findViewById(R.id.rbSpeed4);
    	try
    	{
            if(speed == 0)		{rbSpeed1.setChecked(true);}
            else if(speed == 1){rbSpeed2.setChecked(true);}
            else if(speed == 2){rbSpeed3.setChecked(true);}
            else				{rbSpeed4.setChecked(true);}
            
            
            return;
    	}
    	catch(Exception e)
    	{
    		rbSpeed1.setChecked(true);
    		return;
    	}
    }
    
    /// <summary>
    /// getLc
    /// リンククリック取得
    /// </summary>
    private int getScDataLc()
    {
    	int result = 0;
    	try
    	{
            final RadioButton rbWindowClick1 = (RadioButton)findViewById(R.id.rbWindowClick1);
            final RadioButton rbWindowClick2 = (RadioButton)findViewById(R.id.rbWindowClick2);
            final RadioButton rbWindowClick3 = (RadioButton)findViewById(R.id.rbWindowClick3);
            
            if(rbWindowClick1.isChecked()){result = 0;}
            else if(rbWindowClick2.isChecked()){result = 1;}
            else if(rbWindowClick3.isChecked()){result = 2;}

            return result;
    	}
    	catch(Exception e)
    	{
    		return 0;
    	}
    }
    
    /// <summary>
    /// getLc
    /// リンククリック取得
    /// </summary>
    private void setPrfLc(int lc)
    {
        final RadioButton rbWindowClick1 = (RadioButton)findViewById(R.id.rbWindowClick1);
        final RadioButton rbWindowClick2 = (RadioButton)findViewById(R.id.rbWindowClick2);
        final RadioButton rbWindowClick3 = (RadioButton)findViewById(R.id.rbWindowClick3);
        
    	try
    	{
            if(lc == 0)		{rbWindowClick1.setChecked(true);}
            else if(lc == 1){rbWindowClick2.setChecked(true);}
            else if(lc == 2){rbWindowClick3.setChecked(true);}
            else 			{rbWindowClick1.setChecked(true);}
            return;
    	}
    	catch(Exception e)
    	{
    		rbWindowClick1.setChecked(true);
    		return;
    	}
    	
    }
    
    /// <summary>
    /// getScDataAutoSleep
    /// オートスリープを取得する
    /// </summary>
    private int getScDataAutoSleep()
    {
    	int result = 1;
    	try
    	{
            final CheckBox chk = (CheckBox)findViewById(R.id.chkAutoSleep);
            
            if(chk.isChecked())	{result = 1;}
            else				{result = 0;}

            return result;
    	}
    	catch(Exception e)
    	{
    		return 0;
    	}	
    }
    
    /// <summary>
    /// setPrfAutoSleep
    /// オートスリープを設定する
    /// </summary>
    private void setPrfAutoSleep(int auto)
    {
    	final CheckBox chk = (CheckBox)findViewById(R.id.chkAutoSleep);
    	try
    	{
           if(auto == 1)	{chk.setChecked(true);}
           else				{chk.setChecked(false);}
            return;
    	}
    	catch(Exception e)
    	{
    		chk.setChecked(false);
    	}
    }
    
    /// <summary>
    /// getAutoSleep
    /// オートウェイクアップを取得する
    /// </summary>
    private int getScDataAutoWaikup()
    {
    	int result = 1;
    	try
    	{
            final CheckBox chk = (CheckBox)findViewById(R.id.chkAutoWaikup);
            
            if(chk.isChecked())	{result = 1;}
            else				{result = 0;}

            return result;
    	}
    	catch(Exception e)
    	{
    		return 0;
    	}	
    }
    
    /// <summary>
    /// setPrfAutoWaikup
    /// オートウェイクアップをセットする
    /// </summary>
    private void setPrfAutoWaikup(int auto)
    {
    	final CheckBox chk = (CheckBox)findViewById(R.id.chkAutoWaikup);
    	try
    	{
           if(auto == 1){chk.setChecked(true);}
           else			{chk.setChecked(false); }
            return;
    	}
    	catch(Exception e)
    	{
    		chk.setChecked(false);
    	}
    }
    
    /// <summary>
    /// getAutoSleep
    /// アイコン表示の有無を取得する
    /// </summary>
    private int getScDataDisplayIcon()
    {
    	int result = 1;
    	try
    	{
            final CheckBox chk = (CheckBox)findViewById(R.id.chkDisplayIcon);
            
            if(chk.isChecked())	{result = 1;}
            else				{result = 0;}

            return result;
    	}
    	catch(Exception e)
    	{
    		return 0;
    	}	
    }
    
    /// <summary>
    /// setPrfDisplayIcon
    /// アイコン表示の有無をセットする
    /// </summary>
    private void setPrfDisplayIcon(int auto)
    {
    	final CheckBox chk = (CheckBox)findViewById(R.id.chkDisplayIcon);
    	try
    	{
           if(auto == 1){chk.setChecked(true);}
           else			{chk.setChecked(false); }
            return;
    	}
    	catch(Exception e)
    	{
    		chk.setChecked(false);
    	}
    }
    
    /// <summary>
    /// getLc
    /// ウインドウカラー
    /// </summary>
    private int getScDataWindowColor()
    {
    	try
    	{  		
    		final Spinner spinner = (Spinner) findViewById(R.id.spWindow);
    		
    		if(spinner.getSelectedItem().toString().equals("オレンジ")){return 0;}
    		else if(spinner.getSelectedItem().toString().equals("ブルー")){return 1;}
    		else if(spinner.getSelectedItem().toString().equals("グリーン")){return 2;}
			else if(spinner.getSelectedItem().toString().equals("ピンク")){return 3;}
			else if(spinner.getSelectedItem().toString().equals("パープル")){return 4;}
			else if(spinner.getSelectedItem().toString().equals("レッド")){return 5;}
			else if(spinner.getSelectedItem().toString().equals("イエロー")){return 6;}
    		else{return 0;}
    	}
    	catch(Exception e)
    	{
    		return 0;
    	}
    }

    /// <summary>
    /// setWindowColor
    /// ウインドウカラー
    /// </summary>
    private void setPrfWindowColor(int idx)
    {
    	final Spinner spinner = (Spinner) findViewById(R.id.spWindow);
    	try
    	{
    		spinner.setSelection(idx);
    	}
    	catch(Exception e)
    	{
    		spinner.setSelection(0);
    	}
    }
    
    
    
    
    
}